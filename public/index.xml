<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>seriousco.de</title>
    <link>https://seriousco.de/index.xml</link>
    <description>Recent content on seriousco.de</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Apr 2017 22:00:00 +0100</lastBuildDate>
    <atom:link href="https://seriousco.de/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Writing tests with jest and enzyme</title>
      <link>https://seriousco.de/blog/writing-tests-with-jest-and-enzyme/</link>
      <pubDate>Tue, 04 Apr 2017 22:00:00 +0100</pubDate>
      
      <guid>https://seriousco.de/blog/writing-tests-with-jest-and-enzyme/</guid>
      <description>

&lt;p&gt;The last weeks I spent a lot time getting warm with &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt; - Facebook’s JavaScript library  for building user interfaces. With React you can build rich applications using so-called “React Components”. You can either build an web application - or with React Native - build mobile apps and the components can also be pre-rendered on the server-side using Node for achieving a smooth user experience.&lt;/p&gt;

&lt;p&gt;But the bigger your codebase grows, the more test-coverage you want to reach in order to build a stable application. This is where jest comes into the game and that’s what this blogpost is about: writing (unit-)tests with jest (and enzyme)!&lt;/p&gt;

&lt;h2 id=&#34;what-is-jest&#34;&gt;What is jest?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://facebook.github.io/jest/&#34;&gt;Jest&lt;/a&gt; is a tool for easy and painless JavaScript testing. It is not React specific, so you can use it to test your whole js codebase. It comes with everything you need out of the box, just run jest and all your wishes come true! :wink:&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Consider you have a simple ‘add’ method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function add(a, b) {
  return a + b;
}

module.exports = add;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You want to test if it works as expected? No problem with jest:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const add = require(&#39;./add&#39;);
describe(&#39;add&#39;, () =&amp;gt; {
  it(&#39;should add two numbers&#39;, () =&amp;gt; {
    expect(add(1, 2)).toBe(3);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So as you can see, it’s pretty simple and self-explaining. If you want to try it you can do this right here in your browser: &lt;a href=&#34;https://repl.it/languages/jest&#34;&gt;https://repl.it/languages/jest&lt;/a&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;expecting-functions-to-be-called&#34;&gt;Expecting functions to be called&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Jest comes with a lot of helpful tools to write your tests. You can expect variables to be a specific value, fake timers, spy on functions - I don’t want to go into detail. But I want to show you one simple example: test if a specific function / callback gets called during your test case.&lt;/p&gt;

&lt;p&gt;This is the function you want to test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function calculate(giveFeedback, callback) {
  if (giveFeedback) {
    callback();
  }
}

module.exports = calculate;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can test two things: if the giveFeedback parameter is true, callback should be called, if it is false nothing should happen. Here’s how you would test it with jest and make use of the jest.fn() mock function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const calculate = require(&#39;./calculate&#39;);

describe(&#39;calculate&#39;, () =&amp;gt; {
  it(&#39;should give feedback&#39;, () =&amp;gt; {
    const callback = jest.fn();
    calculate(true, callback);
    expect(callback).toHaveBeenCalled();
  });
  
  it(&#39;should not give feedback&#39;, () =&amp;gt; {
    const callback = jest.fn();
    calculate(false, callback);
    expect(callback).not.toHaveBeenCalled();
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a class=&#34;image-link&#34; href=&#34;https://seriousco.de/images/ij_2017.1.png&#34; title=&#34;IntelliJ 2017.1&#34;&gt;
    &lt;img src=&#39;https://seriousco.de//images/ij_2017.1.png&#39;
      class=&#39;center round-rectangle&#39; 
    style=&#39; width:600px; &#39;/&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you might know, I am a pretty decent IntelliJ fanboy. It’s (in my opinion) the best IDE regarding web-development and just works smoothly without installing a bunch of plugins. Since version 2017.1 this also applies to developing, debugging and executing jest tests. Here you can see what’s new: &lt;a href=&#34;https://www.youtube.com/watch?v=gfXTak1qexI&#34;&gt;https://www.youtube.com/watch?v=gfXTak1qexI&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ok-you-also-talked-about-what-was-it-enzyme&#34;&gt;Ok you also talked about - what was it - “enzyme”?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a class=&#34;image-link&#34; href=&#34;https://seriousco.de/images/airbnb-logo.png&#34; title=&#34;AirBnB&#34;&gt;
    &lt;img src=&#39;https://seriousco.de//images/airbnb-logo.png&#39;
      class=&#39;center round-rectangle&#39; 
    style=&#39;&#39;/&gt;
&lt;/a&gt;
As jest is also powered by Facebook and they are using it to test their React-Components, it’s widely spread in the React Community. But jest doesn’t come with specific React helpers and this is what enzyme is for: providing you testing utilities for React.&lt;/p&gt;

&lt;h3 id=&#34;rendering-modes&#34;&gt;Rendering Modes&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/airbnb/enzyme&#34;&gt;Enzyme&lt;/a&gt; comes with three rendering modes to test your components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;shallow&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;renders the component onto a virtual dom and lets you test all basic features of your react component&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mount&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;mounts the component onto a real dom node and lets you fully test your component including interactions with the DOM API or lifecycle hooks like componentDidMount&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;render&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;renders the component as static HTML which can be analyzed (you cannot interact with the component afterwards)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;wrapper-functionality&#34;&gt;Wrapper functionality&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Each of those rendering functions returns a wrapper which lets you interact with your component / the html output and analyze it. For example you can expect the HTML to equal a specific text:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function MyComponent(props) {
  return &amp;lt;div&amp;gt;test&amp;lt;span class=”icon-star”&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;;
}

const wrapper = shallow(&amp;lt;MyComponent /&amp;gt;);
expect(wrapper.text()).to.equal(‘test’);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can expect or set the value of a specific prop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const wrapper = mount(&amp;lt;MyComponent bar=”baz” /&amp;gt;);
expect(wrapper.props().bar).to.equal(&#39;baz&#39;);
wrapper.setProps({ bar: &#39;foo&#39; });
expect(wrapper.props().bar).to.equal(&#39;foo&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Navigate to your component’s DOM with css selectors:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const wrapper = mount(&amp;lt;MyComponent bar=”baz” /&amp;gt;);
expect(wrapper.find(‘.icon-star’).type()).to.equal(‘span’);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simulate Events
Simulating (DOM) events? No problem with enzyme! Here’s an example how you can simulate a simple button click:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function MyComponent(props) {
  return &amp;lt;div&amp;gt;&amp;lt;button onClick={props.onButtonClick}&amp;gt;ClickMe&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;;
}

const mockOnClick = jest.fn();
const wrapper = mount(&amp;lt;MyComponent onButtonClick={mockOnClick} /&amp;gt;);
wrapper.find(‘button’).simulate(‘click’);
expect(mockOnClick).toHaveBeenCalled();
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;This was a basic overview about jest and the react test utility library enzyme.
Do you have any questions? Don’t hesitate to &lt;a href=&#34;https://seriousco.de/contact&#34;&gt;contact me&lt;/a&gt;! :smile:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Hashcode 2017</title>
      <link>https://seriousco.de/blog/google-hashcode-2017/</link>
      <pubDate>Fri, 24 Feb 2017 20:30:00 +0100</pubDate>
      
      <guid>https://seriousco.de/blog/google-hashcode-2017/</guid>
      <description>&lt;p&gt;Yesterday (23rd February 2017) I&amp;rsquo;ve participated at the Google Hashcode together with &lt;span class=&#34;tooltip&#34; title=&#34;Philipp, Marton &amp; Christoph&#34;&gt;three colleagues&lt;/span&gt; and it was quite awesome!&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;image-link&#34; href=&#34;https://seriousco.de/images/hashcode1.jpg&#34; title=&#34;Google Hashcode&#34;&gt;
    &lt;img src=&#39;https://seriousco.de//images/hashcode1.jpg&#39;
      class=&#39;center round-rectangle&#39; 
    style=&#39; width:450px; &#39;/&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://hashcode.withgoogle.com/&#34;&gt;Google Hashcode&lt;/a&gt; is a coding contest organized by (youdontsay) Google. Everyone who lives in Europe, the Middle East or Africa can participate and try to solve the problem statement provided. Only teams of 2 - 4 people can register and try to reach a top score. The top scoring teams will be invited to the final round which takes place at Paris.&lt;/p&gt;

&lt;p&gt;In the first round - the online qualification - teams can participate from anywhere with their own computer. To get a bit of a contest feeling some teams come together at a place and form a &amp;ldquo;hub&amp;rdquo;. There is an overall scoreboard and you can filter it based on your hub, so it adds a bit of a challenge for the local teams to be the best in their hub.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As you might imagine, we hosted a hub at our &lt;a href=&#34;https://www.catalysts.cc/en&#34;&gt;Catalysts&lt;/a&gt; office in vienna and around 30 people participated in our hub. At 18:30 CET the contest got introduced by a livestream where they presented some interesting stats. All participants listened to the livestream and waited for the announcement of the problem statement. As soon as the statement was announced all teams rushed to their places and started to work on the challenge.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;image-link&#34; href=&#34;https://seriousco.de/images/hashcode2.jpg&#34; title=&#34;Google Hashcode&#34;&gt;
    &lt;img src=&#39;https://seriousco.de//images/hashcode2.jpg&#39;
      class=&#39;center round-rectangle&#39; 
    style=&#39; width:450px; &#39;/&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem statement was about YouTube, respectively about streaming videos. Given was a data center where all videos are stored and the information of all endpoints (which videos they watch and how often). You also got a list of available cache servers which endpoints they are connected to and what&amp;rsquo;s the latency between them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Have you ever wondered what happens behind the scenes when you watch a YouTube video?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The challenge was to save as much latency as possible by distributing the most watched videos on the cache servers near to the endpoints. The point is that cache servers only have a specific amount of capacity, so they can&amp;rsquo;t store all videos at once. You have to decide which video should be placed on the right cache server(s).&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve implemented some different algorithms and scored pretty nice. All in all we&amp;rsquo;ve reached the 2nd place in our hub and the 5th place Austria-wide.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;image-link&#34; href=&#34;https://seriousco.de/images/hashcode_scoreboard.png&#34; title=&#34;Google Hashcode&#34;&gt;
    &lt;img src=&#39;https://seriousco.de//images/hashcode_scoreboard.png&#39;
      class=&#39;center round-rectangle&#39; 
    style=&#39; width:450px; &#39;/&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was a lot of fun and a tricky challenge, I can highly recommend to participate at the Hashcode next year!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips for the JavaScript Console</title>
      <link>https://seriousco.de/blog/tips-for-the-javascript-console/</link>
      <pubDate>Wed, 11 Jan 2017 20:00:00 +0100</pubDate>
      
      <guid>https://seriousco.de/blog/tips-for-the-javascript-console/</guid>
      <description>

&lt;p&gt;Before Christmas I did some lessons of the &lt;a href=&#34;https://javascript30.com/&#34;&gt;30 Day Javascript Challenge&lt;/a&gt; from &lt;a href=&#34;http://twitter.com/wesbos&#34;&gt;@wesbos&lt;/a&gt;. On Day 9 I&amp;rsquo;ve learned some cool stuff regarding the JavaScript console of modern browsers, which I want to share with you!&lt;/p&gt;

&lt;h2 id=&#34;simple-logging&#34;&gt;Simple Logging&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;console.log(&#39;Simple Log&#39;);
console.info(&#39;Info.&#39;);
console.warn(&#39;Warning!&#39;);
console.error(&#39;Shit. (with Stacktrace!)&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most of you probably know these ones. They are nice to log some data to the console and with &lt;strong&gt;info&lt;/strong&gt;, &lt;strong&gt;warn&lt;/strong&gt; &amp;amp; &lt;strong&gt;error&lt;/strong&gt; you get special highlighting or even the stacktrace being printed with.&lt;/p&gt;

&lt;p&gt;Regardless if you want to print objects or just simple strings, this is pretty helpful. You can also format strings like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;console.log(&#39;Welcome on %s!&#39;, &#39;seriousco.de&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you can style text like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;console.log(&#39;%c Styled Text.&#39;, &#39;font-size:18px;color:blue;background:red&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;printing-a-table-of-data&#34;&gt;Printing a table of data&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Want to print an array of objects? This function will be your new best friend! &lt;strong&gt;console.table(yourData)&lt;/strong&gt; will list your data like this:&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;image-link&#34; href=&#34;https://seriousco.de/images/console_table.png&#34; title=&#34;console.table&#34;&gt;
    &lt;img src=&#39;https://seriousco.de/images/console_table.png&#39;
      class=&#39;center&#39; 
    style=&#39;&#39;/&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So you have much more overview about your data.&lt;/p&gt;

&lt;h2 id=&#34;print-the-json-data-of-a-html-element&#34;&gt;Print the JSON data of a HTML element&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;When you console.log a DOM element you get the element printed in a HTML tree. Sometimes you need some deeper information of an element&amp;rsquo;s data. Just type &lt;strong&gt;console.dir(element)&lt;/strong&gt; and it will print the JSON data.&lt;/p&gt;

&lt;h2 id=&#34;asserting&#34;&gt;Asserting&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Want to assert something via the console? Just do it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var myCake = false;
console.assert(myCake, &#39;The cake is a lie!&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;counting&#34;&gt;Counting&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;With console.count you can easily count by a specific string / object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;console.count(&#39;Me&#39;); // 1
console.count(&#39;Me&#39;); // 2
console.count(&#39;Me&#39;); // 3
console.count(&#39;You&#39;); // 1
console.count(&#39;You&#39;); // 2
console.count(&#39;Me&#39;); // 4
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;timing-functions&#34;&gt;Timing functions&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;With console.time and .timeEnd you can easily measure how much time an action takes. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;console.time(&#39;fetching data&#39;);
setTimeout(function () {
  console.timeEnd(&#39;fetching data&#39;);
}, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;grouping&#34;&gt;Grouping&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;If you have many logs it can be quite overwhelming. Sometimes it is helpful to group them like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;console.group(&#39;Group 1&#39;);
console.log(&#39;Hey, I am a member of Group 1!&#39;);
console.groupEnd(&#39;Group 1&#39;);
console.groupCollapsed(&#39;Group 2&#39;); //collapsed by default
console.log(&#39;Hey, I am a member of Group 2!&#39;);
console.groupEnd(&#39;Group 2&#39;);
console.log(&#39;It is me, excludie :(&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see all the commands in action? Just open your dev tools on this site! :wink:
Hopefully you enjoyed it and learned some new things - see you next time :grinning:&lt;/p&gt;

&lt;script&gt;
  function consoleStuff() {
    if (window.javaScriptConsoleTest) return;
    window.javaScriptConsoleTest = true;
  
    console.clear();
    
    // Simple Logging
    console.log(&#39;Simple Log&#39;);
    console.info(&#39;Info.&#39;);
    console.warn(&#39;Warning!&#39;);
    console.error(&#39;Shit. (with Stacktrace!)&#39;);
    console.log(&#39;Welcome on %s!&#39;, &#39;seriousco.de&#39;);
    console.log(&#39;%c Styled Text.&#39;, &#39;font-size:18px;color:blue;background:red&#39;);
    
    // Printing a table of data
    var data = [
      { name: &#39;Jon&#39;,  age: 24, country: &#39;Austria&#39; },
      { name: &#39;Miguel&#39;,  age: 19, country: &#39;Portugal&#39; },
      { name: &#39;Steve&#39;,  age: 31, country: &#39;USA&#39; }
    ];
    console.table(data);
    
    // Print the JSON data of a HTML element
    console.dir(document.body);

    // Asserting
    var myCake = false;
    console.assert(myCake, &#39;The cake is a lie!&#39;);
    
    //Counting
    console.count(&#39;Me&#39;); // 1
    console.count(&#39;Me&#39;); // 2
    console.count(&#39;Me&#39;); // 3
    console.count(&#39;You&#39;); // 1
    console.count(&#39;You&#39;); // 2
    console.count(&#39;Me&#39;); // 4
    
    // Timing functions
    console.time(&#39;fetching data&#39;);
    setTimeout(function () {
      console.timeEnd(&#39;fetching data&#39;);
    }, 1000);
    
    // Grouping
    console.group(&#39;Group 1&#39;);
    console.log(&#39;Hey, I am a member of Group 1!&#39;);
    console.groupEnd(&#39;Group 1&#39;);
    console.groupCollapsed(&#39;Group 2&#39;); //collapsed by default
    console.log(&#39;Hey, I am a member of Group 2!&#39;);
    console.groupEnd(&#39;Group 2&#39;);
    console.log(&#39;It is me, excludie :(&#39;);
  }
  setTimeout(consoleStuff, 2000);
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Creating this website, my first journey with hugo</title>
      <link>https://seriousco.de/blog/first-journey-with-hugo/</link>
      <pubDate>Sun, 01 Jan 2017 12:00:00 +0100</pubDate>
      
      <guid>https://seriousco.de/blog/first-journey-with-hugo/</guid>
      <description>

&lt;p&gt;About two months ago I stumbled upon &lt;a href=&#34;http://gohugo.io/&#34;&gt;hugo&lt;/a&gt;, a static website generator written in go. It provides a basic &lt;span class=&#34;tooltip&#34; title=&#34;Command Line Interface&#34;&gt;CLI&lt;/span&gt; which helps creating your website and its content. After taking a first look I asked myself “Why should I want to create a static website?!”. Instead I could use a great dynamic &lt;span class=&#34;tooltip&#34; title=&#34;Content Managment System&#34;&gt;CMS&lt;/span&gt; with all the fancy plugins - Wordpress, Typo3, Drupal. But I kept on reading the docs and some experiences of the community.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Having your first hugo demo website running can be reached in seconds - even faster than you can say the word “quidditch”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this time I&amp;rsquo;ve already planned to step up and create this website a year ago (the domain is parked since December 2015). I basically knew what I want it to be and look like, but I hadn&amp;rsquo;t thought about how I will build it. As I moved on in the &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;quickstart guide&lt;/a&gt; of hugo, it came to my mind that this static website generator may be the right choice for the first version of my website - and here we are. :grinning:&lt;/p&gt;

&lt;h2 id=&#34;how-is-it-to-build-a-website-with-hugo&#34;&gt;How is it to build a website with hugo?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Hugo comes with a standard template engine and a nice set of features. It offers you the basic tools for creating a website / blog. Having your first hugo demo website running can be reached in seconds - even faster than you can say “quidditch”.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo new site bookshelf
$ cd bookshelf/themes
$ git clone https://github.com/dim0627/hugo_theme_robust.git
$ cd ..
$ hugo server --theme=hugo_theme_robust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the command “hugo server” you can simply run a local development server which watches for changes and automatically refreshes the page.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://gohugo.io/overview/introduction/&#34;&gt;docs&lt;/a&gt; and community behind hugo are sufficient. You mostly find the things you’re searching for and the documentation is pretty well structured. It also is under (heavy) development - the latest &lt;a href=&#34;https://github.com/spf13/hugo/releases/tag/v0.18.1&#34;&gt;release 0.18&lt;/a&gt; is two days old (from the current point of writing this blogpost).&lt;/p&gt;

&lt;p&gt;If you want to know how seriousco.de is built you can take a look at the &lt;a href=&#34;https://github.com/dsumer/seriousco.de&#34;&gt;GitHub repository&lt;/a&gt;. I am using the &lt;a href=&#34;http://themes.gohugo.io/theme/material-docs/&#34;&gt;hugo material theme&lt;/a&gt; which is quite nice but I wanted to change some things in order to fulfill my purpose. I forked the &lt;a href=&#34;https://github.com/digitalcraftsman/hugo-material-docs&#34;&gt;original repository&lt;/a&gt; so you can see the changes in a &lt;a href=&#34;https://github.com/dsumer/hugo-material-docs&#34;&gt;separate repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you can see by the &lt;a href=&#34;https://github.com/dsumer/seriousco.de/commit/75c2e59a85b4554a638a335faba60bc48089d372&#34;&gt;initial commit&lt;/a&gt; I’ve started to work on this website on the first of November 2016. It took me two months from the first day to the official publish day with some pauses in between. A pretty nice performance in my opinion and it demonstrates that you can quickly have a production website up and running with hugo.&lt;/p&gt;

&lt;h2 id=&#34;a-static-website-that-sounds-horrible&#34;&gt;A static website? That sounds horrible!&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Hugo doesn’t come with a fancy &lt;span class=&#34;tooltip&#34; title=&#34;What You See Is What You Get&#34;&gt;WYSIWYG&lt;/span&gt; editor or tons of plugins which bloat up your website. You don’t have a rich backend where you configure everything and write your blog posts. There is no database running in the background serving the content of your website. Instead hugo creates prebuilt .html files for you which can be served via HTTP.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;image-link&#34; href=&#34;https://seriousco.de/images/first-journey-with-hugo.png&#34; title=&#34;&#34;&gt;
    &lt;img src=&#39;https://seriousco.de//images/first-journey-with-hugo.png&#39;
      class=&#39;right round-rectangle&#39; 
    style=&#39; width:300px; &#39;/&gt;
&lt;/a&gt;
That may sound quite horrible to some of you and there are some types of websites where such a static website is not sufficient - as a web developer I understand this. But for some applications hugo is enough or even outperforms dynamic content managment systems and that’s the case for the current version of seriousco.de.&lt;/p&gt;

&lt;p&gt;If you just want to build a simple website you should really give hugo (or any other static website generator) a shot. If you host your site on &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; you basically don’t have to worry about security issues (if you can keep your GitHub account safe). There is no backend where people can change the contents of your website and if some evil scriptkiddy wants to take down your website, they have to attack GitHub - so you can hide behind your big brother. For some special features like a contact formular or a comments area you can use services like formspring or disqus.&lt;/p&gt;

&lt;h2 id=&#34;what-s-your-purpose&#34;&gt;What’s your purpose?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;I basically wanted a website where people can see what I am currently working on and what I did in the past. seriousco.de should should give a short overview about my talents. You can see a &lt;a href=&#34;https://seriousco.de/timeline&#34;&gt;timeline&lt;/a&gt; which basically is my CV. There’s a list of &lt;a href=&#34;https://seriousco.de/projects&#34;&gt;projects&lt;/a&gt; I’ve done in the past or I am doing right now. Last but not least there is this blog where I can write about things I experience as a developer on a daily basis.&lt;/p&gt;

&lt;p&gt;All in all this website builds my digital business card with an easy possibility to &lt;a href=&#34;https://seriousco.de/contact&#34;&gt;contact me&lt;/a&gt; - I hope you enjoy it!&lt;/p&gt;

&lt;h2 id=&#34;hosting-deploying-changes&#34;&gt;Hosting &amp;amp; deploying changes&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;First it was pretty clear to me that I would host this website on my private vServer which I also use to serve other projects of mine like &lt;a href=&#34;https://seriousco.de/projects/risingfarms-online&#34;&gt;Rising Farms Online&lt;/a&gt;. But the hugo docs provide a &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;simple tutorial&lt;/a&gt; for deploying your website with GitHub Pages and because I already planned to publish the code on GitHub that was perfect for me.&lt;/p&gt;

&lt;p&gt;With GitHub Pages you don’t have to worry about anything like complex deployment, traffic or as already stated - security. You just have to commit the changes (the prebuilt .html files) into a separate branch named “gh-pages” and push it to your repository, it’s that simple.&lt;/p&gt;

&lt;p&gt;Here’s the neat deployment script I am using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project.
hugo

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master
git subtree push --prefix=public git@github.com:dsumer/seriousco.de.git gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;I really like it! I cannot compare it with jekyll or other static website generators because hugo is the first and only one I’ve used. I like the easy deployment cycle with GitHub and I don’t even have to worry about hosting and traffic. Local development works out of the box and the docs are sufficient.&lt;/p&gt;

&lt;p&gt;If you don’t have much experience with web development or want to build a rich web application I don’t think hugo’s the right shot for you. But if you like to build your website on your own and keep it simple, I would definitely recommend you to try out hugo! Especially together with GitHub Pages it performs outstandingly good. :wink:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rising Farms Online</title>
      <link>https://seriousco.de/projects/risingfarms-online/</link>
      <pubDate>Wed, 02 Nov 2016 12:18:48 +0100</pubDate>
      
      <guid>https://seriousco.de/projects/risingfarms-online/</guid>
      <description>

&lt;p&gt;
    &lt;img src=&#39;https://seriousco.de/images/rfo_titel.png&#39;
      class=&#39;center&#39; 
    style=&#39;&#39;/&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rising.farm/play&#34;&gt;Rising Farms Online&lt;/a&gt; is the biggest project I’ve been working on. It started in late 2009 / early 2010 and lasts until now. Starting with a Visual Basic 6 application I’ve done several rewritings of the codebase where I’ve learned so many things like different programming languages and design patterns. It was my playground where I could do what I want - and I wanted to build an extraordinary game experience. That’s why i put so much effort into &lt;span class=&#34;tooltip&#34; title=&#34;Rising Farms Online&#34;&gt;RFO&lt;/span&gt;. This project contributes a major part to my coding experience and is the reason why I’m the software engineer I am today.&lt;/p&gt;

&lt;p style=&#34;text-align:center&#34;&gt;
    &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/aB1j0G4NdMg?rel=0&amp;amp;showinfo=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2 id=&#34;about&#34;&gt;What is it about?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Do you know Harvest Moon? It is a farmsimulation with RPG elements, first released in 1996 for the SNES. I loved playing “HM: Friends of Mineral Town” on my Gameboy Advance. Early 2010 I’ve searched the web for an online version of this type of game, but there was no “Harvest Moon Online” out there. That’s when it came to my mind: why not creating your own &lt;span class=&#34;tooltip&#34; title=&#34;Harvest Moon&#34;&gt;HM&lt;/span&gt; Online?&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;image-link&#34; href=&#34;../../images/risingfarms_1.png&#34; title=&#34;Login Screen&#34;&gt;
    &lt;img src=&#39;https://seriousco.de/images/risingfarms_1.png&#39;
      class=&#39;right round-rectangle&#39; 
    style=&#39; width:300px; &#39;/&gt;
&lt;/a&gt;
Rising Farms Online is a multiplayer farmsimulation where you can interact with other players and npcs. Every player has his own farm where he can plant seeds, care for his animals and do a lot of other fun stuff. I didn&amp;rsquo;t want to create just another Farmville clone where you just click around and don’t really interact with others. In RFO the players can leave their farm and interact with each other in “Colona”.&lt;/p&gt;

&lt;p&gt;Colona is a nice town with many possibilities and nice dwellers. Do you want to go mining? Test your new fishing rod? Or just want to sell your harvest at the auction house? No problem! Go out and have a nice chat with the npcs, they might have an exciting quest for you. :wink:&lt;/p&gt;

&lt;h2 id=&#34;challenge&#34;&gt;What was the challenge?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Create an online game they said. It will be easy they said. Ha! I know it would be quite a challenge, but it really was so much fun to see my idea growing up to a game worth playing. 2013 I’ve rebuilt RFO from scratch with web technologies. Everything is written in JavaScript and the users don’t have to install a client on their pc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This project contributes a major part to my coding experience and is the reason why I’m the software engineer I am today.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a class=&#34;image-link&#34; href=&#34;https://seriousco.de/images/risingfarms_2.png&#34; title=&#34;Map Editor&#34;&gt;
    &lt;img src=&#39;https://seriousco.de//images/risingfarms_2.png&#39;
      class=&#39;left round-rectangle&#39; 
    style=&#39; width:300px; &#39;/&gt;
&lt;/a&gt;
RFO basically consists of three components: The game client, the server and the editor. On the client side, informations from the server get rendered onto a html5 canvas element with WebGL. The server is built with nodejs and all the data is stored in a mongodb. The editor is for creating game content: from creating maps to adding items and whole game events - it’s a powerful tool built with angular in the frontend and nodejs in the backend.&lt;/p&gt;

&lt;p&gt;RFO also improved my skills in team leading. A lot of people helped me with this project and sometimes it was a challenge coordinating them. Building a community and serving them well was also a nice experience, but as I said - I had some people helping me with this type of work. :slight_smile:  I am very thankful for them, they volunteered to help me and I will mention them in a separate blog post.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;I am really proud of what I’ve achieved since 2010. I’ve gained so much coding experience and all the codebase refactorings and experiments were so helpful for me to become the software engineer I am today. Since I am working as a full time developer, I don&amp;rsquo;t have much time for RFO in my spare time, but I plan to move forward with this project as good as possible.&lt;/p&gt;

&lt;p&gt;What I’ve told so far is only a little part of what happened behind the scenes, that’s why I’m gonna release a detailed blog entry soon.&lt;/p&gt;

&lt;p&gt;Rising Farms Online on &lt;a href=&#34;https://www.facebook.com/risingfarmsonline/&#34;&gt;&lt;i class=&#34;fa fa-facebook&#34;&gt;&lt;/i&gt; Facebook&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/risingfarmsonline/&#34;&gt;&lt;i class=&#34;fa fa-youtube&#34;&gt;&lt;/i&gt; YouTube&lt;/a&gt; and the &lt;a href=&#34;http://www.risingfarms-online.com/&#34;&gt;&lt;i class=&#34;fa fa-globe&#34;&gt;&lt;/i&gt; Official Website&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://seriousco.de/about/</link>
      <pubDate>Tue, 01 Nov 2016 12:35:46 +0100</pubDate>
      
      <guid>https://seriousco.de/about/</guid>
      <description>

&lt;p&gt;
&lt;img src=&#39;https://seriousco.de/images/profile.png&#39;
      class=&#39;center round&#39; 
    style=&#39;&#39;/&gt;
&lt;/p&gt;

&lt;p style=&#34;text-align:center;margin-bottom:30px;&#34;&gt;
Hello! My name is Dominik, I am 24 years old and a passionated software engineer. I live in Vienna, Austria and enjoy being out in the nature, hanging out with my friends or just debugging the projects I am currently working on. :wink:
&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Serious Code&lt;/p&gt;
&lt;p&gt;Do you care about your code? Does it run as expected? Be serious about it.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;When I was a child, I always loved playing around with computers, trying to understand how this all works. I saw it as an endless playground, a paradise where you can try things out and create amazing stuff. Nowadays it is pretty easy to gather the information needed by googling. Via the internet you can connect with other developers and have access to so many free resources which help you improve your skills as a software developer.&lt;/p&gt;

&lt;p&gt;Coding a piece of software and seeing the outcome is just amazing. It is really comparable to other jobs where you build things. You build a castle, your very own, where you can grow and learn so many things to build even better castles. (Sometimes you also have to &lt;a href=&#34;https://toggl.com/programming-princess&#34; title=&#34;Git the Princess!&#34;&gt;rescue princesses&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;purpose&#34;&gt;What&amp;rsquo;s the purpose of this Website?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Here on &lt;a href=&#34;#&#34;&gt;seriousco.de&lt;/a&gt; you can check out my &lt;a href=&#34;./timeline&#34;&gt;CV&lt;/a&gt; or the &lt;a href=&#34;./projects&#34;&gt;projects&lt;/a&gt; I am involved in. You can also find a &lt;a href=&#34;./blog&#34;&gt;blog&lt;/a&gt; on this website where I share stories about things that I experienced in my daily life as a developer. It also should be a little coding database containing snippets, quickstart guides, tipps and other stuff.&lt;/p&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Any questions?&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t hesitate to contact me &lt;a href=&#34;./contact&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;so-it-s-all-about-the-software&#34;&gt;So it&amp;rsquo;s all about the software?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;The growth of developers in these days is enormously high. This is very impressive and also very good, because behind almost everything in our infrastructure is a software which simplifies our daily life. So the need for software engineers is rather high and because the speed of technology development is just unstoppable, this won&amp;rsquo;t change in the near future.&lt;/p&gt;

&lt;p&gt;For example, I really like the development of the web in the past years. It&amp;rsquo;s a place for human beings or organizations to express themselves. Websites (or web applications) aren&amp;rsquo;t bound to any operating system or - with responsive design - a specific device. You can create things and be sure that almost everybody out there has the possibility to easily consume your content without installing tons of stuff on their computer. Whether frontend- or backend-development, you have a wide range of frameworks to choose from, depending on your plans and preferences, which help you building your webapp. They provide basic tools &amp;amp; implementations so that you don&amp;rsquo;t have to reinvent the wheel over and over again and mostly have a prototype of your application running in some hours / days.&lt;/p&gt;

&lt;h2 id=&#34;don-t-you-take-it-too-serious&#34;&gt;Don&amp;rsquo;t you take it too serious?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Although this website&amp;rsquo;s name is seriouscode and I really think that you should be serious about your code - you shouldn&amp;rsquo;t take everything too serious in your life. This life and our planet is just too nice - you shouldn&amp;rsquo;t be stressed out all the day. If you are in trouble or just feeling bad about something, take your time, step back and look at it in an objective way. Sometimes a problem just lives in your head, free your mind.&lt;/p&gt;

&lt;p&gt;With this words I want to end my little story. If you have any questions just contact me &lt;a href=&#34;./contact&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy your life and have a nice day! :slight_smile:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://seriousco.de/contact/</link>
      <pubDate>Tue, 01 Nov 2016 12:35:46 +0100</pubDate>
      
      <guid>https://seriousco.de/contact/</guid>
      <description>&lt;p&gt;Do you have a question or something to say? Don&amp;rsquo;t hesitate! :incoming_envelope:&lt;/p&gt;

&lt;p&gt;Just fill out the form below, I would like to hear from you. :grinning:
&lt;br/&gt;(Of course you can also send me messages in german)
&lt;br/&gt;
&lt;form method=&#34;POST&#34; action=&#34;http://formspree.io/domi.sumer@gmail.com&#34; class=&#34;contact_form&#34;&gt;
    &lt;input type=&#34;hidden&#34; name=&#34;_next&#34; value=&#34;/contact/thanks&#34;/&gt;
    &lt;input type=&#34;text&#34; name=&#34;_gotcha&#34; style=&#34;display:none&#34;/&gt;

    &lt;p&gt;
        &lt;label for=&#34;contact_name&#34;&gt;Your name:&lt;/label&gt;
        &lt;input type=&#34;text&#34; name=&#34;name&#34; id=&#34;contact_name&#34; required&gt;
    &lt;/p&gt;

    &lt;p&gt;
        &lt;label for=&#34;contact_email&#34;&gt;Your email address:&lt;/label&gt;
        &lt;input type=&#34;email&#34; name=&#34;_replyto&#34; id=&#34;contact_email&#34; required&gt;
    &lt;/p&gt;

    &lt;p&gt;
        &lt;label for=&#34;contact_email&#34;&gt;Your message:&lt;/label&gt;
        &lt;br/&gt;
        &lt;textarea name=&#34;message&#34; required&gt;&lt;/textarea&gt;
    &lt;/p&gt;

    &lt;button type=&#34;submit&#34;&gt;Send&lt;/button&gt;
&lt;/form&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thanks</title>
      <link>https://seriousco.de/contact/thanks/</link>
      <pubDate>Tue, 01 Nov 2016 12:35:46 +0100</pubDate>
      
      <guid>https://seriousco.de/contact/thanks/</guid>
      <description>&lt;p&gt;Thanks for your message! :nerd:&lt;/p&gt;

&lt;p&gt;I will respond as soon as possible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Timeline</title>
      <link>https://seriousco.de/timeline/</link>
      <pubDate>Tue, 01 Nov 2016 12:35:46 +0100</pubDate>
      
      <guid>https://seriousco.de/timeline/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is my timeline - from birth to my current job at Catalysts GmbH.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;timeline&#34;&gt;
    &lt;div class=&#34;entry&#34; style=&#34;height: 150px;bottom: 1105px;background: linear-gradient(to bottom, #fff 0%, #d22827 50px);border-top: none;&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;entry&#34; style=&#34;height: 71px;bottom: 1034px;background: #b0ba01;&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;entry&#34; style=&#34;height: 25px;bottom: 1009px;background: #2ce6cc;&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;entry&#34; style=&#34;height: 300px;bottom: 700px;background: #cc7114;&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;entry&#34; style=&#34;height: 191px;bottom: 500px;background: #1455cc;&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;entry&#34; style=&#34;height: 191px;bottom: 300px;background: #9f14cc;&#34;&gt;&lt;/div&gt;

    &lt;div class=&#34;now&#34;&gt;&lt;/div&gt;

    &lt;div class=&#34;left&#34;&gt;
        &lt;div class=&#34;note lieberlieber&#34; data-timeline-y=&#34;1070&#34; style=&#34;bottom:1002px;&#34;&gt;
            &lt;a href=&#34;http://www.lieberlieber.com/en/&#34;&gt;
                LieberLieber&lt;br/&gt;Software GmbH
            &lt;/a&gt;
            &lt;br/&gt;
            &lt;i&gt;&lt;span class=&#34;fa fa-code&#34;&gt;&lt;/span&gt; Software Developer&lt;/i&gt;
            &lt;div class=&#34;date&#34;&gt;03/2014 - 07/2015&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;note&#34; data-timeline-y=&#34;855&#34; style=&#34;bottom:800px;&#34;&gt;
            &lt;span&gt;
                Technical high school
            &lt;/span&gt;
            &lt;br/&gt;
            &lt;i&gt;&lt;span class=&#34;fa fa-map-marker&#34;&gt;&lt;/span&gt; &lt;a href=&#34;http://www.htl-ottakring.at/&#34;&gt;HTL Ottakring&lt;/a&gt;&lt;/i&gt;
            &lt;div class=&#34;date&#34;&gt;09/2007 - 06/2013&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;note&#34; data-timeline-y=&#34;395&#34; style=&#34;bottom:340px;&#34;&gt;
            &lt;span&gt;
                Primary school
            &lt;/span&gt;
            &lt;br/&gt;
            &lt;i&gt;&lt;span class=&#34;fa fa-map-marker&#34;&gt;&lt;/span&gt; &lt;a href=&#34;http://www.vsvoesendorf.ac.at/&#34;&gt;Vösendorf&lt;/a&gt;&lt;/i&gt;
            &lt;div class=&#34;date&#34;&gt;09/1999 - 06/2003&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;right&#34;&gt;
        &lt;div class=&#34;note catalysts&#34; data-timeline-y=&#34;1150&#34; style=&#34;bottom: 1100px;&#34;&gt;
            &lt;a href=&#34;https://www.catalysts.cc/en/&#34;&gt;
                Catalysts GmbH
            &lt;/a&gt;
            &lt;br/&gt;
            &lt;i&gt;&lt;span class=&#34;fa fa-code&#34;&gt;&lt;/span&gt; Software Engineer&lt;/i&gt;
            &lt;div class=&#34;date&#34;&gt;08/2015 - now&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;note military&#34; data-timeline-y=&#34;1022&#34; style=&#34;bottom: 968px;&#34;&gt;
            &lt;span&gt;
                Military service
            &lt;/span&gt;
            &lt;br/&gt;
            &lt;i&gt;&lt;span class=&#34;fa fa-map-marker&#34;&gt;&lt;/span&gt; &lt;a href=&#34;http://www.bundesheer.at/english/&#34;&gt;Austrian Armed Forces&lt;/a&gt;&lt;/i&gt;
            &lt;div class=&#34;date&#34;&gt;09/2013 - 02/2014&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;note&#34; data-timeline-y=&#34;595&#34; style=&#34;bottom: 547px;&#34;&gt;
            &lt;span&gt;
                Grammar school
            &lt;/span&gt;
            &lt;br/&gt;
            &lt;i&gt;&lt;span class=&#34;fa fa-map-marker&#34;&gt;&lt;/span&gt; &lt;a href=&#34;http://www.keimgasse.at/&#34;&gt;BRG Keimgasse&lt;/a&gt;&lt;/i&gt;
            &lt;div class=&#34;date&#34;&gt;09/2003 - 06/2007&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;note birth&#34; data-timeline-y=&#34;5&#34; style=&#34;bottom: -49px;&#34;&gt;
            &lt;span&gt;
                Birth
            &lt;/span&gt;
            &lt;br/&gt;
            &lt;i&gt;&lt;span class=&#34;fa fa-map-marker&#34;&gt;&lt;/span&gt; &lt;a href=&#34;http://www.wienkav.at/kav/wil/&#34;&gt;Wilhelminenspital&lt;/a&gt;&lt;/i&gt;
            &lt;div class=&#34;date&#34;&gt;06.04.1993&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
    function centerNotes() {
        $(&#39;.note&#39;).each(function (key, note) {
            var timelineY = $(note).attr(&#39;data-timeline-y&#39;);
            if (timelineY) {
                $(note).css(&#39;bottom&#39;, timelineY - ($(note).outerHeight() / 2));
            }
        });
    }
    $(document).ready(function () {
        centerNotes();
    });
    $(window).resize(function () {
        centerNotes();
    });
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Pespila</title>
      <link>https://seriousco.de/projects/pespila/</link>
      <pubDate>Tue, 01 Nov 2016 12:18:48 +0100</pubDate>
      
      <guid>https://seriousco.de/projects/pespila/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Driving License Trainer</title>
      <link>https://seriousco.de/projects/driving-license-trainer/</link>
      <pubDate>Tue, 01 Nov 2016 11:18:48 +0100</pubDate>
      
      <guid>https://seriousco.de/projects/driving-license-trainer/</guid>
      <description>

&lt;p&gt;&lt;a class=&#34;image-link&#34; href=&#34;https://seriousco.de/images/driving_license_trainer_1.png&#34; title=&#34;Driving License Trainer&#34;&gt;
    &lt;img src=&#39;https://seriousco.de//images/driving_license_trainer_1.png&#39;
      class=&#39;left round-rectangle&#39; 
    style=&#39; width:300px; &#39;/&gt;
&lt;/a&gt;
It was back in 2013, when I did my military service at the austrian armed forces and started learning for my driving license test. I was in a small office with a friend of mine and we had much spare time which we could spend as we like.&lt;/p&gt;

&lt;p&gt;Most of the time I spent with my baby &lt;a href=&#34;../risingfarms-online&#34;&gt;Rising Farms Online&lt;/a&gt;, but I also wanted to achieve my driving license while I was at the army because I knew I wouldn&amp;rsquo;t have as much free time later on when I will be working full time as a software developer.&lt;/p&gt;

&lt;p&gt;Okay, I had to learn and I wanted to arrange it as comfortable as possible - that was the moment when it came to my mind: why not code my own driving license trainer? So I could improve my coding skillz and learn for the test at the same time and hey - what&amp;rsquo;s more motivating than learning with your own piece of software? :smiley:&lt;/p&gt;

&lt;h2 id=&#34;about&#34;&gt;What is it about?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a class=&#34;image-link&#34; href=&#34;https://seriousco.de/images/driving_license_trainer.png&#34; title=&#34;Scorepoint System&#34;&gt;
    &lt;img src=&#39;https://seriousco.de//images/driving_license_trainer.png&#39;
      class=&#39;right round-rectangle&#39; 
    style=&#39; width:300px; &#39;/&gt;
&lt;/a&gt;
Driving License Trainer is a nodejs application which helps you learning for the theory part (Austria specific) of your driving license test. It is written in javascript, makes use of the express framework and renders html with jade templates.&lt;/p&gt;

&lt;p&gt;The look and feel of the application is very similiar to the official test software because I wanted to get used to it while learning.&lt;/p&gt;

&lt;p&gt;For me, the most important feature is the scorepoint system. For each question you have a scorepoint saved in a separate file. Fill out the right answers for a question and a scorepoint will be added to it. If you choose the wrong answers, the scorepoint of the question will be reset to zero. My goal was to bring all categories/questions to at least scorepoint 4 so i could be sure to know as many questions as possible when I do the real test.&lt;/p&gt;

&lt;h2 id=&#34;challenge&#34;&gt;What was the challenge?&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;With some luck I can fetch the questions from their server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the toughest problems was to get the official questions for the driving license test. After some googling I stumbled upon the &lt;a href=&#34;http://www.oeamtc.at/portal/fuehrerscheintest&#34;&gt;ÖAMTC online test&lt;/a&gt; and saw that they are working with the right set of questions. It was an online test written in JavaScript - &amp;ldquo;with some luck I can fetch the questions from their server&amp;rdquo; I thought. After some time examining the source code I found where they serve the content files - each question as a single json file named by the question number - beginning by one.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t know how many questions they provided exactly, so i wrote a nodejs script which tries to fetch the json files from 1.json to xxx.json. You can find this script in the &lt;a href=&#34;https://github.com/dsumer/driving-license-trainer&#34;&gt;&lt;i class=&#34;fa fa-github&#34;&gt;&lt;/i&gt; GitHub repository&lt;/a&gt; of this project. I ended up with around 2000 questions - very nice!&lt;/p&gt;

&lt;p&gt;There was also some other information which could be fetched like the images of every question and the type of the test. After fetching all the data needed, I started implementing the main logic.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Github&lt;/p&gt;
&lt;p&gt;Check out the project on &lt;a href=&#34;https://github.com/dsumer/driving-license-trainer&#34;&gt;&lt;i class=&#34;fa fa-github&#34;&gt;&lt;/i&gt; Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;The Driving License Trainer was a small project which helped me learning and improving my coding skills. With the project I gathered experience with the express framework and it gave me a better know-how of nodejs overall.&lt;/p&gt;

&lt;p&gt;Feel free to use the driving license trainer on your own! Unfortunately I can&amp;rsquo;t assure that the questions are correct. Many questions have changed since 2013 and I don&amp;rsquo;t know if ÖAMTC has kept their questions up-to-date. Anyways, you can try to run the refresh.js script to fetch the newest questions from the ÖAMTC server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd ~/driving-license-trainer/public/data
$ node refresh.js
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>